name: testing

on:
  push:
    tags:
      - '**'
    branches: 
      - master
  pull_request:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
  SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}

jobs:
  lint:
    name: lint test
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.16'

      - name: golang tidy linting
        run: make lint

  terraform:
    name: terraform test
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: "${{ secrets.SERVICE_NAME }}-dev-id"
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: set up terraform env
        run: |
          echo "TF_VAR_project_id=${PROJECT_ID}" >> $GITHUB_ENV
          echo "TF_VAR_service_name=${SERVICE_NAME}" >> $GITHUB_ENV
          echo "TF_VAR_service_account=${SERVICE_ACCOUNT}" >> $GITHUB_ENV

      - name: terraform format
        id: tf_fmt
        run: terraform fmt -check

      - name: terraform init
        id: tf_init
        run: terraform init

      - name: terraform validation
        id: tf_validate
        run: terraform validate -no-color

      - name: terraform plan
        id: tf_plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: comment pr
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.tf_plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### terraform formatting and styling 🖌 \`${{ steps.tf_fmt.outcome }}\`
            #### terraform initialization ⚙️ \`${{ steps.tf_init.outcome }}\`
            #### terraform plan 📖 \`${{ steps.tf_plan.outcome }}\`
            #### terraform validation 🤖 \`${{ steps.tf_validate.outcome }}\`
      
            <details><summary>show plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *pushed by: @${{ github.actor }}, action: \`${{ github.event_name }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: terraform plan status
        if: steps.tf_plan.outcome == 'failure'
        run: exit 1

  unit_test:
    needs:
      - lint
    name: unit test
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.16'

      - name: run golang unit test
        run: make test
