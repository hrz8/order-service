name: testing

on:
  push:
    tags:
      - '**'
    branches: 
      - master
  pull_request:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
  SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}

jobs:
  lint:
    name: lint test
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.16'

      - name: golang tidy linting
        run: make lint

  unit_test:
    needs:
      - lint
    name: unit test
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.16'

      - name: run golang unit test
        run: make test

  terraform_test:
    needs:
      - unit_test
    name: validate terraform
    runs-on: ubuntu-latest
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: setup terraform
        uses: hashicorp/setup-terraform@v2

      - name: set up terraform env
        run: |
          echo "TF_VAR_project_id=${PROJECT_ID}" >> $GITHUB_ENV
          echo "TF_VAR_service_name=${SERVICE_NAME}" >> $GITHUB_ENV
          echo "TF_VAR_service_account=${SERVICE_ACCOUNT}" >> $GITHUB_ENV
          echo "TF_VAR_stage=${SERVICE_STAGE}" >> $GITHUB_ENV
          echo "TF_VAR_image_version=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: terraform init
        run: terraform init

      - name: terraform format
        run: terraform fmt -check

      - name: terraform validation
        run: terraform validate -no-color

      - name: terraform plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1
